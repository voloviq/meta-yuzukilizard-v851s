diff --git a/.build_revision b/.build_revision
index d737cf8..e42ce02 100644
--- a/.build_revision
+++ b/.build_revision
@@ -1 +1 @@
-6160
+6170
diff --git a/Makefile b/Makefile
index 3640610..5d55c91 100644
--- a/Makefile
+++ b/Makefile
@@ -5,9 +5,10 @@ CROSS_COMPILE ?= arm-none-eabi
 # Log level defaults to info
 LOG_LEVEL ?= 30
 
-SRCS := main.c board.c lib/debug.c lib/xformat.c lib/fdt.c lib/string.c
+SRCS := main.c board-v851s.c lib/debug.c lib/xformat.c lib/fdt.c lib/string.c
 
 INCLUDE_DIRS :=-I . -I include -I lib
+LIB_DIR := -L ./
 LIBS := -lgcc -nostdlib
 DEFINES := -DLOG_LEVEL=$(LOG_LEVEL) -DBUILD_REVISION=$(shell cat .build_revision)
 
@@ -31,7 +32,7 @@ HOSTSTRIP=strip
 
 MAKE=make
 
-DTB ?= sun8i-t113-mangopi-dual.dtb
+DTB ?= sun8i-v851s-lizard.dtb
 KERNEL ?= zImage
 
 all: git begin build mkboot
diff --git a/arch/arch.mk b/arch/arch.mk
index 7e201ed..217d183 100644
--- a/arch/arch.mk
+++ b/arch/arch.mk
@@ -1,5 +1,5 @@
 ARCH := arch
-SOC:=$(ARCH)/arm32/mach-t113s3
+SOC:=$(ARCH)/arm32/mach-v851s
 
 INCLUDE_DIRS += -I $(ARCH)/arm32/include -I $(SOC)/include -I $(SOC) -I $(SOC)/mmc
 
diff --git a/arch/arm32/mach-v851s/sdmmc.c b/arch/arm32/mach-v851s/sdmmc.c
index 575098c..ea8d72b 100644
--- a/arch/arm32/mach-v851s/sdmmc.c
+++ b/arch/arm32/mach-v851s/sdmmc.c
@@ -554,7 +554,7 @@ static bool sdmmc_detect(sdhci_t *hci, sdmmc_t *card)
 					return FALSE;
 			} while (status != MMC_STATUS_TRAN);
 		}
-		const char *strver = "unknown";
+		const char UNUSED_DEBUG *strver = "unknown";
 		switch (card->extcsd[EXT_CSD_REV]) {
 			case 1:
 				card->version = MMC_VERSION_4_1;
diff --git a/arch/arm32/mach-v851s/sunxi_dma.c b/arch/arm32/mach-v851s/sunxi_dma.c
index 073b90a..b2c0a9f 100644
--- a/arch/arm32/mach-v851s/sunxi_dma.c
+++ b/arch/arm32/mach-v851s/sunxi_dma.c
@@ -245,7 +245,7 @@ int dma_test()
 	u32		  i, valid;
 
 	len = ALIGN(len, 4);
-	trace("DMA: test 0x%08x ====> 0x%08x, len %uKB \r\n", (u32)src_addr, (u32)dst_addr, (len / 1024));
+    trace("DMA: test 0x%08" PRIx32 " ====> 0x%08" PRIx32 ", len %" PRIu32 "KB \r\n", (u32)src_addr, (u32)dst_addr, (len / 1024));
 
 	/* dma */
 	dma_set.loop_mode		= 0;
@@ -308,7 +308,7 @@ int dma_test()
 		if (valid) {
 			debug("DMA: test OK in %lums\r\n", (time_ms() - timeout));
 		} else
-			error("DMA: test check failed at %u bytes\r\n", i);
+			error("DMA: test check failed at %" PRIu32 " bytes\r\n", i);
 	}
 
 	dma_stop(hdma);
diff --git a/arch/arm32/mach-v851s/sunxi_sdhci.c b/arch/arm32/mach-v851s/sunxi_sdhci.c
index 0860d9e..e060bf4 100644
--- a/arch/arm32/mach-v851s/sunxi_sdhci.c
+++ b/arch/arm32/mach-v851s/sunxi_sdhci.c
@@ -247,7 +247,7 @@ static void set_read_timeout(sdhci_t *sdhci, u32 timeout)
 	rval |= (rdto_clk << 8);
 	sdhci->reg->timeout = rval;
 
-	trace("rdtoclk:%u, reg-tmout:%u, gctl:%x, clock:%u, nstr:%x\n", rdto_clk, sdhci->reg->timeout, sdhci->reg->gctrl,
+	trace("rdtoclk:%" PRIu32 ", reg-tmout:%" PRIu32 ", gctl:%" PRIx32 ", clock:%u, nstr:%" PRIx32 "\n", rdto_clk, sdhci->reg->timeout, sdhci->reg->gctrl,
 		  sdhci->clock, sdhci->reg->ntsr);
 }
 
@@ -255,7 +255,7 @@ static int prepare_dma(sdhci_t *sdhci, sdhci_data_t *data)
 {
 	sdhci_idma_desc_t *pdes		= sdhci->dma_desc;
 	u32				   byte_cnt = data->blksz * data->blkcnt;
-	u8				*buff;
+	u8				   *buff;
 	u32				   des_idx		 = 0;
 	u32				   buff_frag_num = 0;
 	u32				   remain;
@@ -289,8 +289,8 @@ static int prepare_dma(sdhci_t *sdhci, sdhci_data_t *data)
 		} else {
 			pdes[des_idx].next_desc_addr = ((u32)&pdes[des_idx + 1]) >> 2;
 		}
-		trace("SMHC: frag %d, remain %d, des[%d] = 0x%08x:\r\n"
-			  "  [0] = 0x%08x, [1] = 0x%08x, [2] = 0x%08x, [3] = 0x%08x\r\n",
+		trace("SMHC: frag %" PRIu32 ", remain %" PRIu32 ", des[%" PRIu32 "] = 0x%08" PRIx32 ":\r\n"
+			  "  [0] = 0x%08" PRIx32 ", [1] = 0x%08" PRIx32 ", [2] = 0x%08" PRIx32 ", [3] = 0x%08" PRIx32 "\r\n",
 			  i, remain, des_idx, (u32)(&pdes[des_idx]), (u32)((u32 *)&pdes[des_idx])[0],
 			  (u32)((u32 *)&pdes[des_idx])[1], (u32)((u32 *)&pdes[des_idx])[2], (u32)((u32 *)&pdes[des_idx])[3]);
 	}
@@ -335,15 +335,15 @@ static int wait_done(sdhci_t *sdhci, sdhci_data_t *dat, u32 timeout_msecs, u32 f
 	u32 status;
 	u32 done  = 0;
 	u32 start = time_ms();
-	trace("SMHC: wait for flag 0x%x\r\n", flag);
+	trace("SMHC: wait for flag 0x%" PRIx32 "\r\n", flag);
 	do {
 		status = sdhci->reg->rint;
 		if ((time_ms() > (start + timeout_msecs))) {
-			warning("SMHC: wait timeout %x status %x flag %x\r\n", status & SMHC_RINT_INTERRUPT_ERROR_BIT, status,
+			warning("SMHC: wait timeout %" PRIx32 " status %" PRIx32 " flag %" PRIx32 "\r\n", status & SMHC_RINT_INTERRUPT_ERROR_BIT, status,
 					flag);
 			return -1;
 		} else if ((status & SMHC_RINT_INTERRUPT_ERROR_BIT)) {
-			warning("SMHC: error 0x%x status 0x%x\r\n", status & SMHC_RINT_INTERRUPT_ERROR_BIT,
+			warning("SMHC: error 0x%" PRIx32 " status 0x%" PRIx32 "\r\n", status & SMHC_RINT_INTERRUPT_ERROR_BIT,
 					status & ~SMHC_RINT_INTERRUPT_ERROR_BIT);
 			return -1;
 		}
@@ -367,12 +367,12 @@ static bool read_bytes(sdhci_t *sdhci, sdhci_data_t *dat)
 	if (timeout < 250)
 		timeout = 250;
 
-	trace("SMHC: read %u\r\n", count);
+	trace("SMHC: read %" PRIu32 "\r\n", count);
 
 	status = sdhci->reg->status;
 	err	   = sdhci->reg->rint & SMHC_RINT_INTERRUPT_ERROR_BIT;
 	if (err)
-		warning("SMHC: interrupt error 0x%x status 0x%x\r\n", err & SMHC_RINT_INTERRUPT_ERROR_BIT, status);
+		warning("SMHC: interrupt error 0x%" PRIx32 " status 0x%" PRIx32 "\r\n", err & SMHC_RINT_INTERRUPT_ERROR_BIT, status);
 
 	while ((!err) && (count >= sizeof(sdhci->reg->fifo))) {
 		while (sdhci->reg->status & SMHC_STATUS_FIFO_EMPTY) {
@@ -403,12 +403,12 @@ static bool read_bytes(sdhci_t *sdhci, sdhci_data_t *dat)
 	} while (!done && !err);
 
 	if (err & SMHC_RINT_INTERRUPT_ERROR_BIT) {
-		warning("SMHC: interrupt error 0x%x status 0x%x\r\n", err & SMHC_RINT_INTERRUPT_ERROR_BIT, status);
+		warning("SMHC: interrupt error 0x%" PRIx32 " status 0x%" PRIx32 "\r\n", err & SMHC_RINT_INTERRUPT_ERROR_BIT, status);
 		return FALSE;
 	}
 
 	if (count) {
-		warning("SMHC: read %u leftover\r\n", count);
+		warning("SMHC: read %" PRIu32 " leftover\r\n", count);
 		return FALSE;
 	}
 	return TRUE;
@@ -424,7 +424,7 @@ static bool write_bytes(sdhci_t *sdhci, sdhci_data_t *dat)
 	if (timeout < 250)
 		timeout = 250;
 
-	trace("SMHC: write %u\r\n", count);
+	trace("SMHC: write %llu\r\n", count);
 
 	status = sdhci->reg->status;
 	err	   = sdhci->reg->rint & SMHC_RINT_INTERRUPT_ERROR_BIT;
@@ -466,7 +466,7 @@ bool sdhci_transfer(sdhci_t *sdhci, sdhci_cmd_t *cmd, sdhci_data_t *dat)
 	u32	 timeout;
 	bool dma = false;
 
-	trace("SMHC: CMD%u 0x%x dlen:%u\r\n", cmd->idx, cmd->arg, dat ? dat->blkcnt * dat->blksz : 0);
+	trace("SMHC: CMD%" PRIu32 " 0x%" PRIx32 " dlen:%" PRIu32 "\r\n", cmd->idx, cmd->arg, dat ? dat->blkcnt * dat->blksz : 0);
 
 	if (cmd->idx == MMC_STOP_TRANSMISSION) {
 		timeout = time_ms();
@@ -580,7 +580,7 @@ bool sdhci_reset(sdhci_t *sdhci)
 
 bool sdhci_set_width(sdhci_t *sdhci, u32 width)
 {
-	const char *mode = "1 bit";
+	const char UNUSED_TRACE *mode = "1 bit";
 	sdhci->reg->gctrl &= ~SMHC_GCTRL_DDR_MODE;
 	switch (width) {
 		case MMC_BUS_WIDTH_1:
@@ -591,7 +591,7 @@ bool sdhci_set_width(sdhci_t *sdhci, u32 width)
 			mode			  = "4 bit";
 			break;
 		default:
-			error("SMHC: %u width value invalid\r\n", width);
+			error("SMHC: %" PRIu32 " width value invalid\r\n", width);
 			return FALSE;
 	}
 	if (sdhci->clock == MMC_CLK_50M_DDR) {
@@ -730,11 +730,11 @@ bool sdhci_set_clock(sdhci_t *sdhci, smhc_clk_t clock)
 	}
 
 	if (n > 3) {
-		error("mmc %u error cannot set clock to %uHz\n", sdhci->name, hz);
+		error("mmc %s error cannot set clock to %" PRIu32 "Hz\n", sdhci->name, hz);
 		return false;
 	}
 
-	trace("SMHC: clock ratio %u\r\n", div);
+	trace("SMHC: clock ratio %" PRIu32 "\r\n", div);
 
 	sdhci->reg->clkcr &= ~SMHC_CLKCR_CARD_CLOCK_ON; // Disable clock
 	if (!update_card_clock(sdhci))
diff --git a/board.h b/board.h
index bf29eaa..f102b04 100644
--- a/board.h
+++ b/board.h
@@ -6,7 +6,7 @@
 #include "sunxi_usart.h"
 #include "sunxi_sdhci.h"
 
-#define USART_DBG usart5_dbg
+#define USART_DBG usart_dbg
 
 #define CONFIG_BOOT_SPINAND
 #define CONFIG_BOOT_SDCARD
